import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.*;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.List;

public class PasswordManagerApp extends JFrame {
    private JTextField websiteField;
    private JTextField passwordField;
    private DefaultListModel<String> passwordListModel;
    private JList<String> passwordList;
    private JButton generateButton;
    private JButton saveButton;
    private JButton loadButton;

    private List<String> passwords;

    private static final String LOWERCASE_CHARACTERS = "abcdefghijklmnopqrstuvwxyz";
    private static final String UPPERCASE_CHARACTERS = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
    private static final String DIGITS = "0123456789";
    private static final String SPECIAL_CHARACTERS = "!@#$%^&*()-_=+<>?";

    private static SecureRandom random = new SecureRandom();

    public PasswordManagerApp() {
        setTitle("Password Manager");
        setSize(400, 400);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLocationRelativeTo(null);

        passwords = new ArrayList<>();
        passwordListModel = new DefaultListModel<>();
        passwordList = new JList<>(passwordListModel);

        JPanel inputPanel = new JPanel(new GridLayout(4, 2));
        inputPanel.add(new JLabel("Website:"));
        websiteField = new JTextField();
        inputPanel.add(websiteField);
        inputPanel.add(new JLabel("Password:"));
        passwordField = new JTextField();
        inputPanel.add(passwordField);

        generateButton = new JButton("Generate Password");
        generateButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                generatePasswordAndAddToList();
            }
        });
        inputPanel.add(generateButton);

        JButton addButton = new JButton("Add Password");
        addButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                String website = websiteField.getText();
                String password = passwordField.getText();
                addPassword(website, password);
            }
        });
        inputPanel.add(addButton);

        // Добавяне на бутони за записване и зареждане на паролите
        saveButton = new JButton("Save Passwords");
        saveButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                savePasswordsToFile();
            }
        });
        inputPanel.add(saveButton);

        loadButton = new JButton("Load Passwords");
        loadButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                loadPasswordsFromFile();
            }
        });
        inputPanel.add(loadButton);

        JPanel listPanel = new JPanel(new BorderLayout());
        listPanel.add(new JLabel("Stored Passwords:"), BorderLayout.NORTH);
        listPanel.add(new JScrollPane(passwordList), BorderLayout.CENTER);

        add(inputPanel, BorderLayout.NORTH);
        add(listPanel, BorderLayout.CENTER);
    }

    private void generatePasswordAndAddToList() {
        int length = 16;
        boolean includeLowercase = true;
        boolean includeUppercase = true;
        boolean includeDigits = true;
        boolean includeSpecialCharacters = true;
        String generatedPassword = generatePassword(length, includeLowercase, includeUppercase, includeDigits,
                includeSpecialCharacters);
        websiteField.setText("Generated");
        passwordField.setText(generatedPassword);
    }

    private void addPassword(String website, String password) {
        String entry = website + ": " + password;
        passwords.add(entry);
        passwordListModel.addElement(entry);
        websiteField.setText("");
        passwordField.setText("");
    }

    private static String generatePassword(int length, boolean includeLowercase, boolean includeUppercase,
            boolean includeDigits, boolean includeSpecialCharacters) {
        StringBuilder password = new StringBuilder(length);
        String allowedCharacters = "";

        if (includeLowercase) {
            allowedCharacters += LOWERCASE_CHARACTERS;
        }
        if (includeUppercase) {
            allowedCharacters += UPPERCASE_CHARACTERS;
        }
        if (includeDigits) {
            allowedCharacters += DIGITS;
        }
        if (includeSpecialCharacters) {
            allowedCharacters += SPECIAL_CHARACTERS;
        }

        if (allowedCharacters.isEmpty()) {
            throw new IllegalArgumentException("At least one type of character must be allowed");
        }

        for (int i = 0; i < length; i++) {
            int randomIndex = random.nextInt(allowedCharacters.length());
            password.append(allowedCharacters.charAt(randomIndex));
        }

        return password.toString();
    }

    private void savePasswordsToFile() {
        try (PrintWriter writer = new PrintWriter(new FileWriter("passwords.txt"))) {
            for (int i = 0; i < passwords.size(); i++) {
                writer.println(passwordListModel.getElementAt(i));
            }
            JOptionPane.showMessageDialog(this, "Passwords saved successfully.");
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Error saving passwords: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void loadPasswordsFromFile() {
        passwords.clear();
        passwordListModel.clear();
        File file = new File("passwords.txt");
        try {
            if (!file.exists()) {
                if (file.createNewFile()) {
                    JOptionPane.showMessageDialog(this, "New passwords file created.", "Info",
                            JOptionPane.INFORMATION_MESSAGE);
                } else {
                    JOptionPane.showMessageDialog(this, "Failed to create new passwords file.", "Error",
                            JOptionPane.ERROR_MESSAGE);
                    return;
                }
            } else {
                try (BufferedReader reader = new BufferedReader(new FileReader(file))) {
                    String line;
                    while ((line = reader.readLine()) != null) {
                        passwords.add(line);
                        passwordListModel.addElement(line);
                    }
                    JOptionPane.showMessageDialog(this, "Passwords loaded successfully.");
                } catch (IOException e) {
                    JOptionPane.showMessageDialog(this, "Error loading passwords: " + e.getMessage(), "Error",
                            JOptionPane.ERROR_MESSAGE);
                }
            }
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Error accessing passwords file: " + e.getMessage(), "Error",
                    JOptionPane.ERROR_MESSAGE);
        }
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                new PasswordManagerApp().setVisible(true);
            }
        });
    }
}
